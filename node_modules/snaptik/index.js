const fetch = require('node-fetch');
const FormData = require('form-data');

class Snaptik {
    constructor(url) {
        this.url = url;
    }

    async getToken() {
        const h = await fetch('https://snaptik.app/')
        const j = await h.text()
        const t = j.split('token" value="')[1].split('"')[0]
        return t
    }

    async snapRequest(u) {
        const t = await this.getToken()

        const form = new FormData();
        form.append('url', u);
        form.append('token', t);

        const headers = {
            ...form.getHeaders(),
        };

        const options = {
            method: 'POST',
            body: form,
            headers,
            referrer: 'https://snaptik.app/',
            referrerPolicy: 'strict-origin-when-cross-origin',
            mode: 'cors',
            credentials: 'include',
        };
        const h = await fetch("https://snaptik.app/abc2.php", options);

        const r = await h.text()
        const x = r.split('escape(r))}("')[1]
        const a = r.split('escape(r))}("')[1].split('",')[0]
        const b = x.split('",')[1].split(',')[0]
        const c = x.split(',"')[1].split('",')[0]
        const z = x.split('",')[2].split('))')[0]
        const d = z.split(',')[0]
        const e = z.split(',')[1]
        const f = z.split(',')[2]
        return {
            a,
            b,
            c,
            d,
            e,
            f
        }
    }

    hashcode(d, e, f) {
        var x = ["", "split", "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/", "slice", "indexOf", "", "", ".", "pow", "reduce", "reverse", "0"];
        var g = x[2][x[1]](x[0]);
        var h = g[x[3]](0, e);
        var i = g[x[3]](0, f);
        var j = d[x[1]](x[0])[x[10]]()[x[9]](function (a, b, c) {
            if (h[x[4]](b) !== -1) return a += h[x[4]](b) * (Math[x[8]](e, c))
        }, 0);
        var k = x[0];
        while (j > 0) {
            k = i[j % f] + k;
            j = (j - (j % f)) / f
        }
        return k || x[11]
    }

    async decode(h, u, n, t, e, r) {
        r = "";
        for (var i = 0, len = h.length; i < len; i++) {
            var s = "";
            while (h[i] !== n[e]) {
                s += h[i];
                i++
            }
            for (var j = 0; j < n.length; j++) s = s.replace(new RegExp(n[j], "g"), j);
            r += String.fromCharCode(this.hashcode(s, e, 10) - t)
        }
        return decodeURIComponent(escape(r))
    }

    async metadata(u) {
        const h = await fetch(u)
        const j = await h.json()
        return j
    }

    async download() {
        try {
            const x = await this.snapRequest(this.url)
            const z = await this.decode(x.a, x.b, x.c, x.d, x.e, x.f)
            const y = z.split('<a href=\\"')[1]
            const a = y.split('\\"')[0]
            const b = y.split('data-backup=\\"')[1].split('\\"')[0]
            const c = z.split('<a href=\\"')[3].split('\\"')[0]
            const k = z.split("getThumbnail('")[1].split("')")[0]
            const m = await this.metadata(k)

            var link = {
                status: 200,
                link_1: a,
                link_2: b,
                link_3: c,
                metadata: m
            }
        } catch (e) {
            var link = {
                status: 500,
                message: "Unknwon link or vidio private."
            }
        }

        return link
    }
}

module.exports = Snaptik;